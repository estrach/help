################################################################################
# Quick help
################################################################################

tmux_help () {
    echo "Help in screen CTRL + A then ?"
    echo "Control commands in tmux are used <CTRL + A> (note this has been changed from"
    echo "the default of <CTRL + B>) followed by a another key.  Some useful commands are:"
    echo "| COMMAND                     | ACTION"
    echo "+-----------------------------+--------------------------------------------------------"
    echo "| <CTRL + A> ?                | Tmux help"
    echo "| <CTRL + A> W                | Switch window - global view of all windows and sessions"
    echo "| <CTRL + A> S                | Switch session - global view of all sessions"
    echo "| <CTRL + A> <ARROW>          | Switch pane"
    echo "| <CTRL + A> ;                | Switch to last used pane"
    echo "| <CTRL + A> C                | Create new window"
    echo "| <CTRL + A> $                | Rename session"
    echo "| <CTRL + A> ,                | Rename window"
    echo "| <CTRL + A> <NUM>            | Switch to <NUM> window in the current session"
    echo "| <CTRL + A> N                | Next window in the current session"
    echo "| <CTRL + A> P                | Previous window in the current session"
    echo "| <CTRL + A> L                | Last viewed window in the current session"
    echo "| <CTRL + A> [                | Enter copy mode"
    echo "| <CTRL + A> ]                | Paste from copy mode"
    echo "| <CTRL + A> :                | Enter command mode"
    echo "| <CTRL + A> X                | Kill pane"
    echo "| <CTRL + A> \"                | Split veritically"
    echo "| <CTRL + A> %                | Split horizontally"
    echo "| <CTRL + A> Z                | Zoom in/out on the current pane"
    echo "| <CTRL + A> <SHIFT + L>      | Last session"
    echo ""
    echo "CONSOLE COMMANDS"
    echo "These can be run from the console or via the command line with the tmux cli"
    echo "| COMMAND                                            | ACTION"
    echo "+----------------------------------------------------+---------------------------------------"
    echo "| kill-pane                                          |"
    echo "| kill-window                                        |"
    echo "| kill-session                                       |"
    echo "| move-window -s \$SESSION_NAME:\$INDEX                | Move the named session window to the"
    echo "|                                                    | current session"
    echo "| splitw                                             | split vertically"
    echo "| splitw -h                                          | split horizontally"
    echo "| :resize-pane -D                                    | Resizes the current pane down"
    echo "| :resize-pane -U                                    | Resizes the current pane upward"
    echo "| :resize-pane -L                                    | Resizes the current pane left"
    echo "| :resize-pane -R                                    | Resizes the current pane right"
    echo "| :resize-pane -D 10                                 | Resizes the current pane down by 10 cells"
    echo "| :resize-pane -U 10                                 | Resizes the current pane upward by 10 cells"
    echo "| :resize-pane -L 10                                 | Resizes the current pane left by 10 cells"
    echo "| :resize-pane -R 10                                 | Resizes the current pane right by 10 cells"
    echo "| :swap-pane -U                                      | Swap up down panes"
    echo ""
    echo "| tmux detach-client -a                              | Detach all existing sessions"
    echo "| tmux new-session -d -s \$SESSION_NAME               | Create new named session"
    echo "| tmux rename-window -t \$SESSION_NAME:0 \$NAME        | Rename window in session"
    echo "| tmux new-window -t \$SESSION_NAME:1 -n \$NAME        | Create new named window in session"
    echo "| tmux new-window -t \$SESSION_NAME:1 -n \$NAME \$CMD   | As above and run $CMD in window,"
    echo "|                                                    | close on completion"
    echo "| tmux send-keys -t \$SESSION_NAME:3 '\$COMMAND' Enter | Run command in specified window"
    echo "| tmux attach -t \$SESSION_NAME                       | Attach to named session"
    echo "| tmux source-file ~/.tmux.conf                      | Reload updated conf file"
    echo "| tmux kill-server                                   | Kill all tmux sessions"
    echo ""
    echo "Note: running commands in other tmux windows will not cause the current session to pause, to pause"
    echo "the current session it is necessary to use a lock file"
}

screen_help () {
    echo "Help in screen CTRL + A then ?"
    echo "Control commands in screen are used <CTRL + A> followed by a another key.  Some useful commands are:"
    echo "| COMMAND                     | ACTION"
    echo "+-----------------------------+---------------------------------------"
    echo "| <CTRL + A> S                | splits the screen horizontally"
    echo "| <CTRL + A> |                | splits the screen vertically'"
    echo "| <CTRL + A> tab              | switches between two regions"
    echo "| <CTRL + A> c                | Creates a screen within a region.  If more than one screen exists for the current region"
    echo "| <CTRL + A> n                | Switches to the next screen in the region"
    echo "| <CTRL + A> p                | Switches to the previous screen in the region"
    echo "| <CTRL + A> \"                | shows a list of screens for the current region"
    echo "| <CTRL + A> <NUMBER/NAME>    | jumps to a specific numbered screen in the current region"
    echo "| <CTRL + A> A                | Name the current screen"
    echo "| <CTRL + A> X                | remove the current region"
    echo "| <CTRL + A> Q                | remove all regions excepting the current region"
    echo "| <CTRL + A> a <CTRL + A> a   | switch to last visited window"
    echo "| <CTRL + A> k                | kill current window"
    echo "| <CTRL + A> :                | Bring up a screen console"
    echo "| resize <N>%                 | In the console, resize the current window to N percent of the terminal size"
    echo ""
    echo "CONSOLE COMMANDS"
    echo "screen -S <NAME OF SERIAL SESSION TO START> /dev/ttyUSB0 115200"
    echo "screen -S <NAME OF SESSION TO START>"
    echo "screen -r <NAME OF SESSION TO REATTACH>"
    echo "screen -X -S <NAME OF SESSION YOU WANT TO KILL> quit"
    echo "screen -list"
    echo "screen -x <NAME OF SESSION TO ATTACH MULTIPLE TERMINALS>"
    echo ""
    echo "Some custom commands have been added.  These are:"
    echo "| COMMAND                                         | ACTION"
    echo "+-------------------------------------------------+--------------------------------------------------"
    echo "| screenconn <STY>                                | Connect to session <STY>"
    echo "| screenkill <STY>                                | Kill session"
    echo "| screenusb <USB_PORT_IDX> <optional:BAUD_RATE>   | Connect to serial USB, default baud rate 115200"
    echo "| close_ticket_session                            | Remove build folder and close <STY> session"
}

git_help () {
    echo "| ACTION                                      | COMMAND                                                   | NOTES"
    echo "+---------------------------------------------+-----------------------------------------------------------+-----------------"
    echo "| Add a tag:                                  | git tag -a v1.4 -m \"my version 1.4\"                       | Requires pushing the tag"
    echo "| Push tag:                                   | git push --set-upstream origin tags/<TAG>                 |"
    echo "| View all tags:                              | git tag                                                   |"
    echo "| View all branches including remote          | git branch -a                                             |"
    echo "| Switch to branch, commit or tag:            | git checkout <BRANCH|COMMIT_HASH|tags/TAG>                |"
    echo "| Create and switch to a new branch:          | git checkout -b <BRANCH>                                  | Requires pushing the new branch"
    echo "| Push new branch:                            | git push --set-upstream origin <BRANCH>                   |"
    echo "| Modify previous commits                     | git rebase -i HEAD~<N>                                    | N is the number of commits to be modified"
    echo "| Get the URL for the remote repo             | git config --get remote.origin.url                        |"
    echo "| Get visual diff                             | git difftool                                              |"
    echo "| Revert a commit                             | git revert <COMMIT_HASH>                                  | Removes the commit, inverse of cherrypick"
    echo "| Revert range of commits                     | git revert <COMIT_HASH_B>^..<COMMIT_HASH_D>               | A -> B -> C -> D -> E -> HEAD becomes"
    echo "|                                             |                                                           | A -> B -> C -> D -> E -> F -> HEAD where"
    echo "|                                             |                                                           | where F contains the reverse of B-D inclusive."
    echo "| Revert a commit without auto commit         | git revert -n ...                                         |"
    echo "| Show diff ignoring whitespace changes       | git diff --ignore-all-space                               |"
    echo "| Show diff between tags or commits           | git diff <TAG1|COMMIT1|BRANCH1>..<TAG2|COMMIT2|BRANCH2>   | Also works with log"
    echo "| Show diff with progress through diff        | git -P diff main --color=always | less -r -M              | Uses less to display viewing progress"
    echo "| Show diff between branches for file         | git diff <BRANCH>..main -- <FILENAME>                     | Show the diff between BRANCH and main for FILENAME"
    echo "| Apply patch without whitespace changes      | git apply --reject --whitespace=fix <PATCH_FILE>          |"
    echo "| Revert changes to commit hash               | git diff HEAD <COMMIT_HASH> | git apply                   | Can also be used to apply changes between commits"
    echo "| Rewrite commit history                      | git commit --amend                                        |"
    echo "| Get the remote url for the repo             | git config --get remote.origin.url                        |"
    echo "| Revert last commit, but keep changes staged | git reset --soft HEAD~                                    |"
    echo "| Get list of all previous git actions        | git reflog                                                |"
    echo "| Stash only unstaged changes                 | git stash push --keep-index                               |"
    echo "| Set the submodules to match the root        | git submodule update                                      |"
}
