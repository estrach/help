################################################################################
# Quick help
################################################################################

help () {
    echo "Defined help commands from github.com:estrach/help.git:"
    echo "tmux_help"
    echo "screen_help"
    echo "git_help"
    echo "misc_help"
    echo "yocto_help"
    echo "nvim_help"
    echo "useful_snippets"
}

tmux_help () {
    echo "Help in screen CTRL + A then ?"
    echo "Control commands in tmux are used <CTRL + A> (note this has been changed from"
    echo "the default of <CTRL + B>) followed by a another key.  Some useful commands are:"
    echo "| COMMAND                     | ACTION"
    echo "+-----------------------------+--------------------------------------------------------"
    echo "| <CTRL + A> ?                | Tmux help"
    echo "| <CTRL + A> W                | Switch window - global view of all windows and sessions"
    echo "| <CTRL + A> S                | Switch session - global view of all sessions"
    echo "| <CTRL + A> <ARROW>          | Switch pane"
    echo "| <CTRL + A> ;                | Switch to last used pane"
    echo "| <CTRL + A> C                | Create new window"
    echo "| <CTRL + A> $                | Rename session"
    echo "| <CTRL + A> ,                | Rename window"
    echo "| <CTRL + A> <NUM>            | Switch to <NUM> window in the current session"
    echo "| <CTRL + A> N                | Next window in the current session"
    echo "| <CTRL + A> P                | Previous window in the current session"
    echo "| <CTRL + A> L                | Last viewed window in the current session"
    echo "| <CTRL + A> [                | Enter copy mode"
    echo "| <CTRL + A> ]                | Paste from copy mode"
    echo "| <CTRL + A> :                | Enter command mode"
    echo "| <CTRL + A> X                | Kill pane"
    echo "| <CTRL + A> \"                | Split veritically"
    echo "| <CTRL + A> %                | Split horizontally"
    echo "| <CTRL + A> Z                | Zoom in/out on the current pane"
    echo "| <CTRL + A> <SHIFT + L>      | Last session"
    echo "| <CTRL + A> <ALT + 2>        | Resize all panes equally"
    echo ""
    echo "CONSOLE COMMANDS"
    echo "These can be run from the console or via the command line with the tmux cli"
    echo "| COMMAND                                            | ACTION"
    echo "+----------------------------------------------------+---------------------------------------"
    echo "| kill-pane                                          |"
    echo "| kill-window                                        |"
    echo "| kill-session                                       |"
    echo "| move-window -s \$SESSION_NAME:\$INDEX                | Move the named session window to the"
    echo "|                                                    | current session"
    echo "| splitw                                             | split vertically"
    echo "| splitw -h                                          | split horizontally"
    echo "| :resize-pane -D                                    | Resizes the current pane down"
    echo "| :resize-pane -U                                    | Resizes the current pane upward"
    echo "| :resize-pane -L                                    | Resizes the current pane left"
    echo "| :resize-pane -R                                    | Resizes the current pane right"
    echo "| :resize-pane -D 10                                 | Resizes the current pane down by 10 cells"
    echo "| :resize-pane -U 10                                 | Resizes the current pane upward by 10 cells"
    echo "| :resize-pane -L 10                                 | Resizes the current pane left by 10 cells"
    echo "| :resize-pane -R 10                                 | Resizes the current pane right by 10 cells"
    echo "| :swap-pane -U                                      | Swap up down panes"
    echo ""
    echo "| tmux detach-client -a                              | Detach all existing sessions"
    echo "| tmux new-session -d -s \$SESSION_NAME               | Create new named session"
    echo "| tmux rename-window -t \$SESSION_NAME:0 \$NAME        | Rename window in session"
    echo "| tmux new-window -t \$SESSION_NAME:1 -n \$NAME        | Create new named window in session"
    echo "| tmux new-window -t \$SESSION_NAME:1 -n \$NAME \$CMD   | As above and run $CMD in window,"
    echo "|                                                    | close on completion"
    echo "| tmux send-keys -t \$SESSION_NAME:3 '\$COMMAND' Enter | Run command in specified window"
    echo "| tmux attach -t \$SESSION_NAME                       | Attach to named session"
    echo "| tmux source-file ~/.tmux.conf                      | Reload updated conf file"
    echo "| tmux kill-server                                   | Kill all tmux sessions"
    echo ""
    echo "Note: running commands in other tmux windows will not cause the current session to pause, to pause"
    echo "the current session it is necessary to use a lock file"
}

screen_help () {
    echo "Help in screen CTRL + A then ?"
    echo "Control commands in screen are used <CTRL + A> followed by a another key.  Some useful commands are:"
    echo "| COMMAND                     | ACTION"
    echo "+-----------------------------+---------------------------------------"
    echo "| <CTRL + A> S                | splits the screen horizontally"
    echo "| <CTRL + A> |                | splits the screen vertically'"
    echo "| <CTRL + A> tab              | switches between two regions"
    echo "| <CTRL + A> c                | Creates a screen within a region.  If more than one screen exists for the current region"
    echo "| <CTRL + A> n                | Switches to the next screen in the region"
    echo "| <CTRL + A> p                | Switches to the previous screen in the region"
    echo "| <CTRL + A> \"                | shows a list of screens for the current region"
    echo "| <CTRL + A> <NUMBER/NAME>    | jumps to a specific numbered screen in the current region"
    echo "| <CTRL + A> A                | Name the current screen"
    echo "| <CTRL + A> X                | remove the current region"
    echo "| <CTRL + A> Q                | remove all regions excepting the current region"
    echo "| <CTRL + A> a <CTRL + A> a   | switch to last visited window"
    echo "| <CTRL + A> k                | kill current window"
    echo "| <CTRL + A> :                | Bring up a screen console"
    echo "| resize <N>%                 | In the console, resize the current window to N percent of the terminal size"
    echo ""
    echo "CONSOLE COMMANDS"
    echo "screen -S <NAME OF SERIAL SESSION TO START> /dev/ttyUSB0 115200"
    echo "screen -S <NAME OF SESSION TO START>"
    echo "screen -r <NAME OF SESSION TO REATTACH>"
    echo "screen -X -S <NAME OF SESSION YOU WANT TO KILL> quit"
    echo "screen -list"
    echo "screen -x <NAME OF SESSION TO ATTACH MULTIPLE TERMINALS>"
    echo ""
    echo "Some custom commands have been added.  These are:"
    echo "| COMMAND                                         | ACTION"
    echo "+-------------------------------------------------+--------------------------------------------------"
    echo "| screenconn <STY>                                | Connect to session <STY>"
    echo "| screenkill <STY>                                | Kill session"
    echo "| screenusb <USB_PORT_IDX> <optional:BAUD_RATE>   | Connect to serial USB, default baud rate 115200"
    echo "| close_ticket_session                            | Remove build folder and close <STY> session"
}

git_help () {
    echo "# Git reset command flow"
    echo "+------------------------------------------------------------------------------------------------------------+"
    echo "| *Local Git Repo*              ^          +            +                +                 +                 |"
    echo "+------------------------------ | -------- | ---------- | -------------- | --------------- | ----------------+"
    echo "                                |\`commit\`  |\`checkout\`  |\`reset --hard\`  |\`reset --mixed\`  |\`reset --soft\`"
    echo "+------------------------------ | -------- | ---------- | -------------- | --------------- | ----------------+"
    echo "| *Index* (staging)     ^       +          |            |                |                 v                 |"
    echo "+---------------------- | ---------------- | ---------- | -------------- | ----------------------------------+"
    echo "                        |\`add\`             |            |                |"
    echo "+---------------------- | ---------------- | ---------- | -------------- | ----------------------------------+"
    echo "| *Working directory*   +                  v            |                v                                   |"
    echo "+------------------------------------------------------ | ---------------------------------------------------+"
    echo "                                                        v"
    echo ""
    echo "| ACTION                                      | COMMAND                                                   | NOTES"
    echo "+---------------------------------------------+-----------------------------------------------------------+-----------------"
    echo "| Add a tag:                                  | git tag -a v1.4 -m \"my version 1.4\"                       | Requires pushing the tag"
    echo "| Push tag:                                   | git push --set-upstream origin tags/<TAG>                 |"
    echo "| View all tags:                              | git tag                                                   |"
    echo "| View all branches including remote          | git branch -a                                             |"
    echo "| Switch to branch, commit or tag:            | git checkout <BRANCH|COMMIT_HASH|tags/TAG>                |"
    echo "| Create and switch to a new branch:          | git checkout -b <BRANCH>                                  | Requires pushing the new branch"
    echo "| Push new branch:                            | git push --set-upstream origin <BRANCH>                   |"
    echo "| Modify previous commits                     | git rebase -i HEAD~<N>                                    | N is the number of commits to be modified"
    echo "| Get the URL for the remote repo             | git config --get remote.origin.url                        |"
    echo "| Get visual diff                             | git difftool                                              |"
    echo "| Revert a commit                             | git revert <COMMIT_HASH>                                  | Removes the commit, inverse of cherrypick"
    echo "| Revert range of commits                     | git revert <COMIT_HASH_B>^..<COMMIT_HASH_D>               | A -> B -> C -> D -> E -> HEAD becomes"
    echo "|                                             |                                                           | A -> B -> C -> D -> E -> F -> HEAD where"
    echo "|                                             |                                                           | where F contains the reverse of B-D inclusive."
    echo "| Revert a commit without auto commit         | git revert -n ...                                         |"
    echo "| Show diff ignoring whitespace changes       | git diff --ignore-all-space                               |"
    echo "| Show diff between tags or commits           | git diff <TAG1|COMMIT1|BRANCH1>..<TAG2|COMMIT2|BRANCH2>   | Also works with log"
    echo "| Show diff with progress through diff        | git -P diff main --color=always | less -r -M              | Uses less to display viewing progress"
    echo "| Show diff between branches for file         | git diff <BRANCH>..main -- <FILENAME>                     | Show the diff between BRANCH and main for FILENAME"
    echo "| Apply patch without whitespace changes      | git apply --reject --whitespace=fix <PATCH_FILE>          |"
    echo "| Revert changes to commit hash               | git diff HEAD <COMMIT_HASH> | git apply                   | Can also be used to apply changes between commits"
    echo "| Rewrite commit history                      | git commit --amend                                        |"
    echo "| Get the remote url for the repo             | git config --get remote.origin.url                        |"
    echo "| Revert last commit, but keep changes staged | git reset --soft HEAD~                                    |"
    echo "| Get list of all previous git actions        | git reflog                                                |"
    echo "| Stash only unstaged changes                 | git stash push --keep-index                               |"
    echo "| Set the submodules to match the root        | git submodule update                                      |"
    echo "| Clone only the top level (no history)       | git clone --depth 1 <repository_url>                      |"
}

misc_help () {
    echo "| Action                          | Command                                                                         | Notes     |"
    echo "|---------------------------------+---------------------------------------------------------------------------------+-----------|"
    echo "| Create a tarball                | tar -czvf filename.tar.gz /path/to/dir1                                         |           |"
    echo "| List contents of tarball        | tar -ztvf projects.tar.gz                                                       |           |"
    echo "| Extract tarball                 | tar -xzvf projects.tar.gz                                                       |           |"
    echo "| Create copy of disc             | dd if=/dev/sda of=output.img                                                    |           |"
    echo "| Gen ISO image                   | genisoimage -v -J -r -V MY_DISK_LABEL -o /home/user/file.iso /home/user/for_iso |           |"
    echo "| Directory size                  | du -sh /path/to/dir                                                             |           |"
    echo "| Mount directory over directory  | mount -o bind /src/dir /dst/dir                                                 |           |"
    echo "| Mount media                     | mount /dev/sda1 /dst/dir                                                        |           |"
    echo "| Make a sound                    | echo $'\\\\a'                                                                      |           |"
    echo "| Report disc usage               | quota -u euan.strachan -s                                                       |           |"
    echo "| Get a core dump                 | ulimit -c unlimited                                                             | dump to ~ |"
    echo "| Dump to /tmp/core               | echo \"/tmp/core\" > /proc/sys/kernel/core_pattern                                |           |"
    echo "| Ripgrep include only file types | rg aes -g '*.{bb,xml}'                                                          |           |"
    echo "| Background a task               | <CTRL> + z                                                                      |           |"
    echo "| Foreground a task               | fg                                                                              |           |"
    echo "| List background task            | jobs                                                                            |           |"
    echo "| View services using ports       | netstat -tulp                                                                   |           |"
}

yocto_help () {
    echo "Quick start: https://docs.yoctoproject.org/brief-yoctoprojectqs/index.html"
    echo "git clone git://git.yoctoproject.org/poky"
    echo "cd poky"
    echo "source oe-init-build-env"
    echo "bitbake core-image-sato"
    echo "devtool modify openssh"
    echo "simulate: runqemu qemux86-64runqemu qemux86-64"
    echo "oe-pkgdata-util find-path <FILE_PATH_IN_ROOTFS>"
}

nvim_help () {
    echo "| Action                             | Example                | Notes            |"
    echo "|------------------------------------+------------------------+------------------|"
    echo "| Reverse the line order in neovim   | :%!tac                 |                  |"
    echo "| Paste the contents of a file       | :r index.html          |                  |"
    echo "| Reverse selection                  | :'<,'>!tac             |                  |"
    echo "| Write out selection                | :'<,'>w! filename.txt  |                  |"
    echo "| Find and replace                   | :%s/<FIND>/<REPLACE>/g | Add \`c\` to the   |"
    echo "|                                    |                        | end to request   |"
    echo "|                                    |                        | confirmation     |"
    echo "| Delete lines containing            | :g/profile/d           |                  |"
    echo "| Delete lines not containing        | :g!/profile/d          |                  |"
    echo "| Diff two split                     | :windo diffthis        |                  |"
    echo "| Turn off diff                      | :windo diffoff         |                  |"
    echo "| Get the contents of a folder       | :r !tail -n +1 <DIR>/* |                  |"
    echo "| Get the path of the current file   | :echo @%               |                  |"
    echo "| Bind the scroll of L and R pannels | :set scrollbind        |                  |"
    echo "| Line numbers                       | :set nu                |                  |"
    echo "| Line numbers off                   | :set nonu              |                  |"
    echo "| Next table entry                   | ]|                     |                  |"
    echo "| Next git change hunk               | ]c                     |                  |"
    echo "| Next spelling mistake              | ]s                     |                  |"
    echo "| Change case                        | crs snake_case         | vim-abolish      |"
    echo "|                                    | crc camelCase          |                  |"
    echo "|                                    | cru UPPER_CASE         |                  |"
    echo "|                                    | cr- dash-case          |                  |"
    echo "|                                    | cr. dot.case           |                  |"
    echo "| Surround with                      | ysiw<whatever>         | vim-surround     |"
    echo "| Surround with brackets             | Sb                     | vim-surround     |"
    echo "| Delete surrounding \"parenthesis\"   | ds\"                    |                  |"
    echo "| Change (parenthesis) to '          | cs('                   |                  |"
    echo "| Toggle relative line numbers       | :set relativenumber!   |                  |"
    echo "| Create list of incrementing nums   | <C-v>I0 <ESC>gvg<C-a>  | Creates column of|"
    echo "|                                    |                        | 0s and increments|"
    echo "| Write the contents of a folder to  | :r !find ~/sandbox/cef-build -type f -exec tail -n +1 {} + | |"
    echo "| the current file                   |                        |                  |"
    echo ""
    echo "nvim log location: ~/.local/state/nvim/log"
}

useful_snippets () {
    echo "----------------------------------------------------------------------------------------"
    echo " # C backtrace"
    echo "----------------------------------------------------------------------------------------"
    echo "#include <execinfo.h>"
    echo "#include <stdio.h>"
    echo "#include <stdlib.h>"
    echo "#include <syslog.h>"
    echo "/* Obtain a backtrace and print it to stdout. */"
    echo "static void print_trace (void) {"
    echo "    void *array[10];"
    echo "    int size = backtrace (array, 10);"
    echo "    char **strings = backtrace_symbols (array, size);"
    echo "    if (strings != NULL) {"
    echo "        syslog(LOG_ERR, \"[euan][trace]: Obtained %d stack frames.\", size);"
    echo "        for (int i = 0; i < size; i++) {"
    echo "            syslog(LOG_ERR, \"[euan][trace]: frame: %d, function: %s\", i, strings[i]);"
    echo "        }"
    echo "    }"
    echo "    free (strings);"
    echo "}"
    echo ""
    echo ""
    echo "----------------------------------------------------------------------------------------"
    echo " # C catch signal"
    echo "----------------------------------------------------------------------------------------"
    echo "#include <execinfo.h>"
    echo "#include <signal.h>"
    echo "#include <stdio.h>"
    echo "#include <stdlib.h>"
    echo "#include <syslog.h>"
    echo "/* Obtain a backtrace and print it to stdout. */"
    echo "static void print_signal_trace (int) {"
    echo "    void *array[10];"
    echo "    int size = backtrace (array, 10);"
    echo "    char **strings = backtrace_symbols (array, size);"
    echo "    if (strings != NULL) {"
    echo "        syslog(LOG_ERR, \"[euan][trace]: Obtained %d stack frames.\", size);"
    echo "        for (int i = 0; i < size; i++) {"
    echo "            syslog(LOG_ERR, \"[euan][trace]: frame: %d, function: %s\", i, strings[i]);"
    echo "        }"
    echo "    }"
    echo "    free (strings);"
    echo "}"
    echo "// Place this in main loop:"
    echo "//signal(SIGSEGV, print_signal_trace);"
    echo ""
    echo ""
    echo "----------------------------------------------------------------------------------------"
    echo " # C universal debug syslog call"
    echo "----------------------------------------------------------------------------------------"
    echo "syslog(LOG_ERR, \"[euan] %s, %s, %s, %s, %d\", __DATE__, __TIME__, __FILE__, __FUNCTION__, __LINE__);"
    echo ""
    echo ""
    echo "----------------------------------------------------------------------------------------"
    echo " # C++ log last whereami call after interval"
    echo "----------------------------------------------------------------------------------------"
    echo "auto monitor_time = std::chrono::steady_clock::now() + std::chrono::seconds(10);"
    echo "auto interval = std::chrono::seconds(1);"
    echo "auto whereami = [&monitor_time, &interval](const char* filename, const char* function_name, int line_number){"
    echo "    auto now = std::chrono::steady_clock::now();"
    echo "    if ((now - monitor_time) > interval) {"
    echo "        log_err(\"whereami: %s, %s, %d\", filename, function_name, line_number);"
    echo "        monitor_time = now;"
    echo "    }"
    echo "};"
    echo "whereami(__FILE__, __FUNCTION__, __LINE__);"
    echo ""
    echo ""
    echo "----------------------------------------------------------------------------------------"
    echo " # C++ log message after timeout"
    echo "----------------------------------------------------------------------------------------"
    echo "#include <atomic>"
    echo "#include <chrono>"
    echo "#include <condition_variable>"
    echo "#include <mutex>"
    echo ""
    echo "class TimeoutLogger"
    echo "{"
    echo "public:"
    echo "    TimeoutLogger(const std::string& message, const std::chrono::seconds& timeout = std::chrono::seconds(1))"
    echo "        : m_timeout(timeout)"
    echo "        , m_loggingThread(std::thread([this](){LoggingThread();}))"
    echo "        , m_message(message)"
    echo "    {};"
    echo "    ~TimeoutLogger() {"
    echo "        m_destructed = true;"
    echo "        m_cvLog.notify_all();"
    echo "        if (m_loggingThread.joinable()) {"
    echo "            m_loggingThread.join();"
    echo "        }"
    echo "    }"
    echo "    void UpdateLogMessage(const std::string& message) {"
    echo "        std::scoped_lock lock(m_mxMessage);"
    echo "        m_message = message;"
    echo "    }"
    echo "private:"
    echo "    void LoggingThread() {"
    echo "        std::unique_lock<std::mutex> lock(m_mxLog);"
    echo "        std::cv_status interrupted = m_cvLog.wait_for(lock, m_timeout);"
    echo ""
    echo "        // Only log if we timeout"
    echo "        if (interrupted == std::cv_status::timeout && !destructed) {"
    echo "            std::scoped_lock message_lock(m_mxMessage);"
    echo "            log_err(m_message.c_str());"
    echo "        }"
    echo "    }"
    echo ""
    echo "    std::mutex m_mxLog;"
    echo "    std::condition_variable m_cvLog;"
    echo "    std::chrono::seconds m_timeout = std::chrono::seconds(1); // This variable must be declared before m_loggingThread"
    echo "    std::mutex m_mxMessage;"
    echo "    std::string m_message = \"\";"
    echo "    std::thread m_loggingThread;"
    echo "    std::atomic<bool> m_destructed = false; // Required in case the destructor is called before the loggingThread is initiailized"
    echo "};"
    echo ""
    echo "std::string ConvertToMessage(const char* date, const char* time, const char* file, const char* function, int line) {"
    echo "    std::ostringstream oss;"
    echo "    oss << \"[euan] \" << date << \", \" << time << \", \" << file << \", \" << function << \", \" << std::to_string(line);"
    echo "    return oss.str();"
    echo "} // ConvertToMessage(__DATE__, __TIME__, __FILE__, __FUNCTION__, __LINE__);"

}
